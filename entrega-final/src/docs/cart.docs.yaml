components:
  schemas:
    Cart:
      type: object
      properties:
        id:
          type: string
          description: "Automatically generated MongoDB ObjectId for the cart."
          readOnly: true
        products:
          type: array
          description: "Array of product IDs in the cart with their respective quantities."
          items:
            type: object
            properties:
              product:
                type: string
                description: "MongoDB ObjectId referencing a product."
              quantity:
                type: number
                description: "Quantity of the product in the cart."
                default: 1
          default: []
      example:
        id: 649f8f1e5e39a2a0e1c2d9b3
        products:
          - product: 649f8f1e5e39a2a0e1c2d9b4
            quantity: 2
          - product: 649f8f1e5e39a2a0e1c2d9b5
            quantity: 1

    Ticket:
      type: object
      properties:
        code:
          type: string
          description: "Unique code for the ticket."
        amount:
          type: number
          description: "Total amount of the purchase."
        products:
          type: array
          items:
            type: string
          description: "List of product IDs included in the purchase."
        buyer:
          type: string
          description: "MongoDB ObjectId referencing the user who made the purchase."
        purchase_datetime:
          type: string
          format: date-time
          description: "The date and time when the purchase was made."
      required:
        - code
        - amount
        - products
        - buyer
      example:
        code: "TICKET12345"
        amount: 150.75
        products:
          - "prod001"
          - "prod002"
        buyer: "6744a512327a65d34f42c19a"
        purchase_datetime: "2024-11-29T12:34:56.789Z"

  responses:
    
    res400_exceeds_cart_limit:
      description: "Bad Request - Attempt to add a product quantity exceeding stock limit"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Detailed error message explaining the cart's current quantity, the attempted addition, and the product's stock."
          example:
            message: "You currently have 3 of this product in your cart and are trying to add 5 more. However, the product's stock is 7, please add a lower amount or wait until there is more stock."

    res400_amount_exceeds_stock:
      description: "Bad Request - The quantity exceeds the available stock"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Error message indicating the amount exceeds the available stock."
          example:
            message: "Can't add an amount greater than what's in stock"

    res400_invalid_id_length:
      description: "Bad Request - The provided ID does not have the appropriate length."
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Error message indicating the ID is of invalid length."
          example:
            message: "ID doesn't have the appropriate length"

    res401_unauthorized:
      description: "Unauthorized - User must be logged in"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Error message indicating the user is not logged in."
          example:
            message: "Please login to complete this action"
    
    res400_cart_already_exists:
      description: "Bad Request - User already has a cart"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Error message indicating the user already has a cart."
          example:
            message: "User already has a cart"

    res201_cart_created:
      description: "Cart successfully created"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Confirmation message indicating the cart was created."
                example: "Cart created"
              newCart:
                $ref: '#/components/schemas/Cart'
                description: "The newly created cart object."
          example:
            message: "Cart created"
            newCart:
              id: 649f8f1e5e39a2a0e1c2d9b3
              products: []
      
    res404_cart_not_found:
      description: "Cart not found"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Error message indicating the cart was not found."
          example:
            message: "Cart not found"
      
    res200_cart_found:
      description: "Cart successfully found"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Cart'
          example:
            _id: "6748eb27083d133cc0ebda66"
            products: []
      
    res404_product_not_in_inventory:
      description: "The product is not available in inventory"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Error message indicating the product is not in the inventory."
          example:
            message: "product not in inventory"

    res400_not_enough_stock:
      description: "Not enough stock to add the product to the cart"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Error message indicating the stock is insufficient to add the product."
          example:
            message: "not enough stock to add product to the cart, product can't be added"
    
    res200_product_added:
      description: "Product added to the cart successfully"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Confirmation message indicating the product was added."
              cart:
                $ref: '#/components/schemas/Cart'
                description: "Updated cart after adding the product."
          example:
            message: "product added"
            cart:
              _id: "6748eb27083d133cc0ebda66"
              products:
                - product: "6048db47083d133cc0ebda34"
                  quantity: 2

    res404_product_or_cart_not_found:
      description: "The product or cart does not exist"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Error message indicating the product or cart was not found."
          example:
            message: "product or cart not found"

    res400_invalid_amount_to_remove:
      description: "The amount to remove is invalid"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Error message indicating the amount to remove must be at least one."
          example:
            message: "Amount to remove has to be at least one."

    res404_product_not_in_cart:
      description: "The product is not in the cart"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Error message indicating the product is not found in the cart."
          example:
            message: "product not in cart"

    res400_amount_exceeds_quantity:
      description: "The amount to remove exceeds the product quantity in the cart"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Error message indicating the removal amount exceeds the current quantity in the cart."
          example:
            message: "amount to remove can't be higher than the amount of the product in the cart"

    res200_cart_emptied:
      description: "The cart has been emptied"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Message indicating the cart has been emptied."
              userCart:
                $ref: '#/components/schemas/Cart'
                description: "The emptied cart structure."
          example:
            message: "cart has been emptied. Go back to the home page to add more"
            userCart:
              _id: "6748eb27083d133cc0ebda66"
              products: []
  
    res200_items_removed:
      description: "The specified number of items was removed from the cart"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Message indicating how many items were removed."
          example:
            message: "2 item(s) removed from cart"

    res200_cart_deleted:
      description: "The cart was successfully deleted"
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Message confirming the cart was deleted."
          example:
            message: "cart deleted"
    
    res400_products_not_available:
      description: "The products in the cart are not available for purchase."
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Error message indicating the products in the cart are unavailable."
          example:
            message: "The products in the cart are not available to purchase. Wait until they are available again, or empty the cart."

    res200_purchase_completed:
      description: "Purchase was completed successfully."
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Confirmation message indicating the purchase was successful."
              ticket:
                $ref: '#/components/schemas/Ticket'
          example:
            message: "Purchase completed, the ticket is visible here and you'll get it in an email as well."
            ticket:
              code: "TICKET12345"
              amount: 150.75
              products:
                - "prod001"
                - "prod002"
              buyer: "6744a512327a65d34f42c19a"
              purchase_datetime: "2024-11-29T12:34:56.789Z"
    
    res200_partial_purchase_completed:
      description: "Purchase was partially completed, but some products were not purchased due to insufficient stock."
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Message indicating partial purchase with pending or unavailable products."
              ticket:
                $ref: '#/components/schemas/Ticket'
          example:
            message: "Payment processed, the ticket is visible here and you'll get it in an email as well. However, the following product(s) couldn't be bought due to lack of stock: product1, product2."
            ticket:
              code: "TICKET12345"
              amount: 100.50
              products:
                - "prod001"
                - "prod002"
              buyer: "6744a512327a65d34f42c19a"
              purchase_datetime: "2024-11-29T12:34:56.789Z"

paths:

  /api/cart/{cartId}:
    get:
      summary: "Get a cart by ID."
      tags:
        - Cart
      description: "This endpoint retrieves a cart by its ID. If the cart is not found, an error message is returned."
      operationId: "getCartById"
      parameters:
        - name: "cartId"
          in: "path"
          required: true
          description: "The ID of the cart to retrieve."
          schema:
            type: string
      responses:
        404:
          $ref: '#/components/responses/res404_cart_not_found'
        
        200:
          $ref: '#/components/responses/res200_cart_found'
  
  /api/cart/create:
    get:
      summary: "Create a new cart for the user."
      tags:
        - Cart
      description: "This endpoint allows a user to create a new cart with a specified list of products. If the user is not logged in or already has a cart, an appropriate error is returned."
      responses:
        401:
          $ref: '#/components/responses/res401_unauthorized'
        400:
          $ref: '#/components/responses/res400_cart_already_exists'
        201:
          $ref: '#/components/responses/res201_cart_created'

  /api/cart/add-to-cart:
    post:
      summary: "Add a product to the cart."
      tags:
        - Cart
      description: "This endpoint allows a user to add a product to their cart. If the product is not in inventory or there is not enough stock, an error message is returned."
      operationId: "addToCart"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: "The ID of the product to add to the cart."
                amount:
                  type: number
                  description: "The quantity of the product to add."
              example:
                id: "672e10d1692b24919ed7e9ce"
                amount: 4    
      responses:
        404:
          $ref: '#/components/responses/res404_product_not_in_inventory'
        
        400:
          $ref: '#/components/responses/res400_not_enough_stock'
        
        400_invalid_id_length:
          $ref: '#/components/responses/400_invalid_id_length'

        res400_exceeds_cart_limit:
          $ref: '#/components/responses/res400_exceeds_cart_limit'  

        res400_amount_exceeds_stock:
          $ref: '#/components/responses/res400_amount_exceeds_stock'  
        
        200:
          $ref: '#/components/responses/res200_product_added'

  /api/cart/{productId}/{amountToRemove}/{cartId}/remove-product:
    post:
      summary: "Remove a product from the cart."
      tags:
        - Cart
      description: "This endpoint allows a user to remove a specified amount of a product from their cart. If the product or cart does not exist, or the removal amount is invalid, an error message is returned."
      operationId: "removeFromCart"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: "The ID of the product to remove from the cart."
                quantity:
                  type: number
                  description: "The quantity of the product to remove."
              example:
                id: "672e10d1692b24919ed7e9ce"
                amount: 4    
      responses:
        404:
          $ref: '#/components/responses/res404_product_or_cart_not_found'
        
        400_invalid_amount:
          $ref: '#/components/responses/res400_invalid_amount_to_remove'
            
        400_amount_exceeds_quantity:
          $ref: '#/components/responses/res400_amount_exceeds_quantity'

        200_cart_emptied:
          $ref: '#/components/responses/res200_cart_emptied'
          
        200_items_removed:
          $ref: '#/components/responses/res200_items_removed'
    
  /api/cart/{cartId}/purchase:
    post:
      summary: "Complete the purchase of the items in the cart."
      tags:
        - Cart
      description: "This endpoint handles the purchase process for the items in the specified cart. If some or all of the items are unavailable, a partial purchase is processed."
      operationId: "purchaseCart"
      parameters:
        - in: path
          name: cartId
          required: true
          description: "The ID of the cart to purchase."
          schema:
            type: string
            example: "672e10d1692b24919ed7e9ce"
      responses:
        200:
          $ref: '#/components/responses/res200_purchase_completed'
        200_partial:
          $ref: '#/components/responses/res200_partial_purchase_completed'
        400:
          $ref: '#/components/responses/res400_products_not_available'
        404:
          $ref: '#/components/responses/res404_cart_not_found'

  /api/cart/delete/{cartId}:
    delete:
      summary: "Delete a cart by its ID."
      tags:
        - Cart
      description: "This endpoint allows the user to delete a cart by specifying its `cartId`. If the cart is found, it will be deleted. If not, an error message is returned."
      operationId: "deleteCart"
      parameters:
        - in: path
          name: cartId
          required: true
          description: "The ID of the cart to delete."
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/res200_cart_deleted'
        
        404:
          $ref: '#/components/responses/res404_cart_not_found'

              