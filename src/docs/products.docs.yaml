components:
  schemas:
    Product:
      type: object
      required:
        - name
        - price
        - stock
        - seller
      properties:
        name:
          type: string
          description: "Name of the product."
        price:
          type: number
          example: 29.99
        stock:
          type: number
          example: 100
        seller:
          type: string
          description: "Name or identifier of the seller."
      example:
        name: "Wireless Mouse"
        price: 29.99
        stock: 100
        seller: "TechWorld"    
  
  responses:

    res401_login_required:
      description: "User must log in to access this route."
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Error message indicating that login is required."
            example:
              message: "Please log in so you can be verified"

    res403_not_authorized:
      description: "User is not authorized to access this section."
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Error message indicating lack of authorization."
            example:
              message: "you're not authorized to access this section"          

    res200_no_products_yet:
        description: "No products available."
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: "Message indicating no products exist."
              example:
                message: "No products yet"

    res200_products_retrieved:
        description: "List of products retrieved successfully."
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Product'
              description: "An array of product objects."
              example:
                - _id: "672e10d1692b24919ed7e9c8"
                  name: "shirt"
                  price: 176.59
                  stock: 5
                  seller: "Dr. Bernadette Keeling"
                - _id: "672e10d1692b24919ed7e9ca"
                  name: "towels"
                  price: 194.69
                  stock: 17
                  seller: "Tommy Braun"
                - _id: "672e10d1692b24919ed7e9cc"
                  name: "salad"
                  price: 40.35
                  stock: 27
                  seller: "Miss Ida Hudson"

    res200_product_found:
        description: "Product retrieved successfully."
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
                  description: "The unique identifier of the product."
                name:
                  type: string
                  description: "The name of the product."
                price:
                  type: number
                  format: float
                  description: "The price of the product."
                stock:
                  type: number
                  description: "The stock available for the product."
                seller:
                  type: string
                  description: "The name of the seller."
              example:
                _id: "672e10d1692b24919ed7e9ca"
                name: "towels"
                price: 194.69
                stock: 17
                seller: "Tommy Braun"

    res404_product_not_found:
        description: "Product not found."
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: "Error message indicating the product was not found."
              example:
                message: "Product not found"  

    res400_duplicate_product_name:
        description: "A product with the same name already exists for this seller."
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: "Error message indicating that the seller already has a product with the same name."
              example:
                message: "seller already has a product with the same name. try updating the stock of the existing one"                        

    res201_product_created:
        description: "Product was created successfully."
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: "Success message indicating the product was created."
                result:
                  type: object
                  description: "Details of the created product."
                  properties:
                    name:
                      type: string
                      description: "The name of the product."
                    price:
                      type: number
                      format: float
                      description: "The price of the product."
                    stock:
                      type: number
                      description: "The stock available for the product."
                    seller:
                      type: string
                      description: "The name of the seller."
                    _id:
                      type: string
                      description: "The unique identifier for the product."
                  example:
                    message: "product created"
                    name: "lapiz"
                    price: 110
                    stock: 10
                    seller: "brando hernandez"
                    _id: "674a558f663d71ed7451fa84"
    
    res200_elements_changed:
        description: "Specified elements of the product were successfully updated."
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: "Message indicating the number or names of the elements that were changed."
              example:
                message: "price, stock changed"

    res404_user_not_found:
        description: "The specified user could not be found."
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: "Error message indicating that the user was not found."
              example:
                message: "User not found"            

    res200_product_deleted:
        description: "The product was successfully deleted."
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: "Message confirming the product was deleted."
                product:
                  $ref: '#/components/schemas/Product'
            example:
              message: "product deleted"
              product:
                _id: "672e10d1692b24919ed7e9ca"
                name: "towels"
                price: 194.69
                stock: 17
                seller: "Tommy Braun"            

paths:
  /api/products/getAllProducts:
    get:
      summary: "Retrieve all products"
      tags:
        - Products
      description: "This endpoint retrieves all available products. If no products exist, an appropriate message is returned."
      operationId: "getAllProducts"
      responses:
        '200':
          $ref: '#/components/responses/res200_products_retrieved'
        '404':
          $ref: '#/components/responses/res200_no_products_yet'

  /api/products/{productId}:
    get:
      summary: "Retrieve a product by ID"
      tags:
        - Products
      description: "This endpoint retrieves a specific product by its unique identifier. If the product is not found, an appropriate error message is returned."
      operationId: "getProductById"
      parameters:
        - in: path
          name: productId
          required: true
          description: "The ID of the product to retrieve."
          schema:
            type: string
            example: "672e10d1692b24919ed7e9ca"
      responses:
        '200':
          $ref: '#/components/responses/res200_product_found'
        '404':
          $ref: '#/components/responses/res404_product_not_found'

  /api/products/create-product:
    post:
      summary: "Create a new product"
      tags:
        - Products
      description: "This endpoint allows sellers to create a new product. The product name must be unique for the seller."
      operationId: "createProduct"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "The name of the product."
                price:
                  type: number
                  format: float
                  description: "The price of the product."
                stock:
                  type: number
                  description: "The stock available for the product."
              example:
                name: "pen"
                price: 25.50
                stock: 100
      responses:
        '201':
          $ref: '#/components/responses/res201_product_created'
        '400':
          $ref: '#/components/responses/res400_duplicate_product_name'
        '401':
          $ref: '#/components/responses/res401_login_required'
        '403':
          $ref: '#/components/responses/res403_not_authorized'

  /api/products/update/{productId}:
    patch:
      summary: "Update specific elements of a product"
      tags:
        - Products
      description: |
        This endpoint allows users to update specific elements of an existing product, such as price or stock. 
        The `productId` parameter must be a valid product ID, and the request body should specify the fields to update.
      operationId: "updateProduct"
      parameters:
        - name: productId
          in: path
          required: true
          description: "The unique identifier of the product to update."
          schema:
            type: string
            example: "672e10d1692b24919ed7e9ca"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                price:
                  type: number
                  format: float
                  description: "The new price for the product (optional)."
                stock:
                  type: number
                  description: "The new stock quantity for the product (optional)."
              example:
                price: 150.00
                stock: 25
      responses:
        '200':
          $ref: '#/components/responses/res200_elements_changed'
        '404':
          description: "User or product not found."
          content:
            application/json:
              examples: 
                userNotFound:
                  $ref: '#/components/responses/res404_user_not_found'
                productNotFound:
                  $ref: '#/components/responses/res404_product_not_found'                  
        '401':
          $ref: '#/components/responses/res401_login_required'
        '403':
          $ref: '#/components/responses/res403_not_authorized'

  /delete/{productId}:
    delete:
      summary: "Delete a specific product"
      tags:
        - Products
      description: |
        This endpoint allows an authenticated and authorized user to delete a specific product by its `productId`. 
        The product must belong to the user or the user must have administrative permissions.
      operationId: "deleteProduct"
      parameters:
        - name: productId
          in: path
          required: true
          description: "The unique identifier of the product to delete."
          schema:
            type: string
            example: "672e10d1692b24919ed7e9ca"
      responses:
        '200':
          $ref: '#/components/responses/res200_product_deleted'
        '401':
          $ref: '#/components/responses/res401_login_required'
        '403':
          $ref: '#/components/responses/res403_not_authorized'
        '404':
          description: "User not found or product does not exist."
          content:
            application/json:
              oneOf:
                - $ref: '#/components/responses/res404_user_not_found'
                - $ref: '#/components/responses/res404_product_not_found'
